{"version":3,"sources":["../src/client.js"],"names":["createExtensionMethods","require","GraphQLClientBase","GraphQLClient","constructor","config","encodeTxAsBase64","module","exports"],"mappings":"AAAA,MAAM,EAAEA,sBAAF,KAA6BC,QAAQ,4BAAR,CAAnC;;AAEA,MAAMC,oBAAoBD,QAAQ,QAAR,CAA1B;;AAEA;;;;;;;;;;;;;;AAcA,MAAME,aAAN,SAA4BD,iBAA5B,CAA8C;AAC5C;;;;;;;;;;;;;AAaAE,cAAYC,SAAS,2BAArB,EAAkD;AAChD,UAAMA,MAAN;AACAL,2BAAuB,IAAvB,EAA6B,EAAEM,kBAAkB,IAApB,EAA7B;AACD;AAjB2C;;AAoB9CC,OAAOC,OAAP,GAAiBL,aAAjB","file":"client.js","sourcesContent":["const { createExtensionMethods } = require('@arcblock/client-extension');\n\nconst GraphQLClientBase = require('./base');\n\n/**\n * An http client that can read/write data to a forge powered blockchain node, can be used in both node.js and browser.\n *\n * Please note that, due to internal implementation of google-protobuf, all `repeated fields` names are suffixed with `List`\n *\n * @class\n * @example\n * const GraphQLClient = require('@arcblock/graphql-client');\n *\n * const client = new GraphQLClient('https://argon.abtnetwork.io/api');\n * // const client = new GraphQLClient({ endpoint: 'https://argon.abtnetwork.io/api' });\n *\n * const res = await client.getChainInfo();\n */\nclass GraphQLClient extends GraphQLClientBase {\n  /**\n   * Create an instance of GraphQLClient\n   *\n   * @constructor\n   * @param {object|string} config - config object, if a string passed, will be used as the endpoint\n   * @param {string} [config.endpoint='http://localhost:8210/api'] - the graphql endpoint\n   * @param {string} [config.chainId=''] - the chainId of the network\n   * @see GraphQLClient#getQueries\n   * @see GraphQLClient#getMutations\n   * @see GraphQLClient#getSubscriptions\n   * @see GraphQLClient#getTxSendMethods\n   * @see GraphQLClient#getTxEncodeMethods\n   */\n  constructor(config = 'http://localhost:8210/api') {\n    super(config);\n    createExtensionMethods(this, { encodeTxAsBase64: true });\n  }\n}\n\nmodule.exports = GraphQLClient;\n"]}